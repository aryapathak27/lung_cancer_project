lung-cancer-detection-backend/
│
├── app/
│   ├── __init__.py                 # Flask app factory
│   ├── config.py                   # Configuration settings
│   │
│   ├── api/
│   │   ├── __init__.py
│   │   ├── routes.py               # API endpoints
│   │   ├── upload.py               # File upload handler
│   │   ├── predict.py              # Prediction logic
│   │   └── history.py              # History/results retrieval
│   │
│   ├── models/
│   │   ├── __init__.py
│   │   ├── database.py             # SQLAlchemy models
│   │   └── ml_model.py             # ML model loader & inference
│   │
│   ├── services/
│   │   ├── __init__.py
│   │   ├── image_processor.py      # Image preprocessing
│   │   ├── model_service.py        # Model prediction service
│   │   ├── gradcam.py              # Grad-CAM visualization
│   │   └── report_generator.py     # PDF report generation
│   │
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── validators.py           # Input validation
│   │   ├── helpers.py              # Helper functions
│   │   └── constants.py            # Constants & enums
│   │
│   └── middleware/
│       ├── __init__.py
│       ├── auth.py                 # Authentication middleware
│       └── error_handlers.py       # Error handling
│
├── ml_models/
│   ├── trained_model.h5            # Trained CNN model
│   ├── model_weights.h5            # Model weights (if separate)
│   └── label_encoder.pkl           # Label encoder for classes
│
├── uploads/                         # Temporary uploaded images
│   └── .gitkeep
│
├── processed/                       # Processed images & heatmaps
│   └── .gitkeep
│
├── reports/                         # Generated PDF reports
│   └── .gitkeep
│
├── database/
│   └── lung_cancer.db              # SQLite database
│
├── tests/
│   ├── __init__.py
│   ├── test_api.py                 # API endpoint tests
│   ├── test_model.py               # Model inference tests
│   └── test_services.py            # Service layer tests
│
├── migrations/                      # Database migrations
│   └── alembic/
│
├── docs/
│   ├── API.md                      # API documentation
│   └── SETUP.md                    # Setup instructions
│
├── .env                            # Environment variables
├── .gitignore
├── requirements.txt                # Python dependencies
├── run.py                          # Application entry point
├── wsgi.py                         # WSGI server entry
└── README.md

------------------------------------------------------------------------------------------



Step-by-Step Implementation Tasks
Phase 1: Project Setup & Configuration
Task 1.1: Create virtual environment and install dependencies​

bash
python -m venv venv
pip install flask flask-cors flask-sqlalchemy tensorflow pillow numpy opencv-python reportlab
Task 1.2: Create requirements.txt with all dependencies​

Flask==3.0.0

Flask-CORS==4.0.0

Flask-SQLAlchemy==3.1.1

TensorFlow==2.15.0

Pillow==10.1.0

NumPy==1.24.3

OpenCV-Python==4.8.1

ReportLab==4.0.7

python-dotenv==1.0.0

gunicorn==21.2.0

Task 1.3: Create .env file for environment variables​

text
FLASK_APP=run.py
FLASK_ENV=development
SECRET_KEY=your-secret-key-here
DATABASE_URI=sqlite:///database/lung_cancer.db
MODEL_PATH=ml_models/trained_model.h5
UPLOAD_FOLDER=uploads
MAX_FILE_SIZE=10485760
Task 1.4: Create run.py - application entry point​

Import Flask app from app/__init__.py

Configure host, port, debug mode

Run application with app.run()

Phase 2: Flask App Initialization
Task 2.1: Create app/__init__.py - Flask factory pattern​

Initialize Flask app

Load configuration from config.py

Initialize SQLAlchemy database

Register blueprints for API routes

Configure CORS for frontend communication

Set up error handlers

Task 2.2: Create app/config.py - configuration classes​

DevelopmentConfig class with debug=True

ProductionConfig class with optimized settings

TestingConfig for unit tests

Load settings from environment variables

Task 2.3: Create folder structure directories

Create all folders: uploads, processed, reports, database, tests

Phase 3: Database Models
Task 3.1: Create app/models/database.py - SQLAlchemy models​

User model: id, username, email, password_hash, role, created_at

Prediction model: id, user_id, image_path, prediction_class, confidence_score, all_scores (JSON), heatmap_path, timestamp, processing_time

BatchPrediction model: id, user_id, batch_name, created_at, status

Define relationships between models

Task 3.2: Initialize database with tables

Create migration scripts using Flask-Migrate

Run initial migration to create tables

Phase 4: Utility Functions
Task 4.1: Create app/utils/constants.py - define constants​

ALLOWED_EXTENSIONS = ['png', 'jpg', 'jpeg', 'dcm']

CLASS_LABELS = ['Adenocarcinoma', 'Large Cell Carcinoma', 'Normal', 'Squamous Cell Carcinoma']

IMAGE_SIZE = (256, 256)

MAX_BATCH_SIZE = 10

Task 4.2: Create app/utils/validators.py - input validation​

allowed_file(filename) - check file extension

validate_file_size(file) - check file size limit

validate_image(image_path) - verify image integrity

sanitize_filename(filename) - prevent path traversal attacks

Task 4.3: Create app/utils/helpers.py - helper functions​

generate_unique_filename() - create UUID-based filenames

cleanup_old_files() - delete old temporary files

format_confidence_score() - format prediction scores

Phase 5: Image Processing Service
Task 5.1: Create app/services/image_processor.py​

Class: ImageProcessor

load_image(image_path) - load image using PIL/OpenCV

preprocess_for_model(image) - resize to 256x256, normalize pixel values (0-1), convert to RGB, expand dimensions for batch processing

enhance_contrast(image) - apply CLAHE for better visualization

save_processed_image(image, path) - save preprocessed image

Task 5.2: Handle different image formats

Add DICOM support using pydicom library

Convert grayscale to RGB if needed

Handle image orientation

Phase 6: ML Model Service
Task 6.1: Create app/models/ml_model.py - model loader​

Class: CNNModelLoader

load_model() - load trained model from .h5 file using TensorFlow/Keras

load_label_encoder() - load class labels

Implement singleton pattern to load model only once at startup

Handle GPU/CPU device configuration

Task 6.2: Create app/services/model_service.py - inference engine​

Class: ModelService

predict_single(image_path) - perform prediction on single image

predict_batch(image_paths) - batch prediction for multiple images

get_confidence_scores(predictions) - extract confidence for all classes

get_top_prediction(predictions) - return highest confidence class

Add error handling for model inference failures

Task 6.3: Implement prediction pipeline

Load image using ImageProcessor

Preprocess image

Run model inference

Post-process predictions (softmax, argmax)

Return structured results with class labels and scores

Phase 7: Grad-CAM Visualization
Task 7.1: Create app/services/gradcam.py - heatmap generation​

Class: GradCAM

compute_gradcam(model, image, layer_name) - compute gradient-weighted class activation mapping

generate_heatmap(gradcam_output) - create color-coded heatmap

overlay_heatmap(original_image, heatmap) - superimpose heatmap on CT scan

save_visualization(overlay_image, path) - save final visualization

Task 7.2: Configure layer selection

Identify last convolutional layer name from model

Handle different CNN architectures (ResNet, VGG, DenseNet)

Phase 8: API Routes
Task 8.1: Create app/api/routes.py - register blueprints​

Create Blueprint for API endpoints

Register all route handlers

Set up URL prefix /api/v1

Task 8.2: Create app/api/upload.py - file upload endpoint​

Route: POST /api/upload

Accept multipart/form-data with file

Validate file using validators

Generate unique filename

Save to uploads folder

Return file_id and success message

Task 8.3: Create app/api/predict.py - prediction endpoint​

Route: POST /api/predict

Accept file_id or image file

Call ImageProcessor to preprocess

Call ModelService to get predictions

Generate Grad-CAM heatmap

Save results to database

Return JSON: {prediction, confidence_scores, heatmap_url, prediction_id}

Task 8.4: Create app/api/history.py - history endpoints​

Route: GET /api/history - retrieve all user predictions

Route: GET /api/history/<id> - get specific prediction details

Route: DELETE /api/history/<id> - delete prediction record

Implement pagination for history retrieval

Task 8.5: Add utility endpoints

Route: GET /api/health - health check endpoint

Route: GET /api/stats - aggregate statistics (total predictions, class distribution)

Route: POST /api/batch-predict - batch prediction endpoint

Phase 9: Report Generation
Task 9.1: Create app/services/report_generator.py - PDF reports​

Class: ReportGenerator

generate_pdf_report(prediction_data) - create comprehensive report

Include patient info (if available), prediction results, confidence scores, visualization images, timestamp

Add watermark "For Research Use Only"

save_report(report, path) - save PDF to reports folder

Task 9.2: Create download endpoint

Route: GET /api/download/<prediction_id>

Generate PDF report for specific prediction

Return PDF file for download

Phase 10: Authentication & Middleware
Task 10.1: Create app/middleware/auth.py - authentication​

Implement JWT token-based authentication

generate_token(user_id) - create JWT token

verify_token() - validate JWT from request headers

login_required decorator for protected routes

Task 10.2: Create app/middleware/error_handlers.py​

Handle 400 Bad Request - invalid input

Handle 404 Not Found - resource doesn't exist

Handle 413 Payload Too Large - file size exceeded

Handle 500 Internal Server Error - server errors

Return consistent JSON error responses

Task 10.3: Implement logging

Configure Flask logger

Log all API requests

Log prediction results

Log errors and exceptions

Phase 11: Testing
Task 11.1: Create tests/test_api.py - API endpoint tests​

Test upload endpoint with valid/invalid files

Test prediction endpoint

Test history retrieval

Use Flask test client

Task 11.2: Create tests/test_model.py - model tests

Test model loading

Test prediction accuracy

Test preprocessing pipeline

Task 11.3: Create tests/test_services.py - service layer tests

Test ImageProcessor methods

Test GradCAM generation

Test ReportGenerator

Phase 12: Deployment Preparation
Task 12.1: Create wsgi.py - production server entry​

Configure Gunicorn WSGI server

Set worker processes and threads

Task 12.2: Create Dockerfile for containerization​

Base image: python:3.10-slim

Install system dependencies

Copy application code

Install Python requirements

Expose port 5000

Run Gunicorn server

Task 12.3: Add security measures​

Enable HTTPS in production

Add rate limiting to prevent abuse

Implement file upload size limits

Sanitize all user inputs

Add CSRF protection

Task 12.4: Optimize performance

Implement caching for frequently accessed data

Use async task queue (Celery) for long-running predictions

Optimize model inference speed

Add database indexing

Integration Checklist
✅ Create folder structure and setup environment

✅ Initialize Flask app with configuration

✅ Define database models and create tables

✅ Build utility functions and validators

✅ Implement image preprocessing service

✅ Create ML model loader and inference service

✅ Build Grad-CAM visualization generator

✅ Develop all API endpoints and routes

✅ Add report generation functionality

✅ Implement authentication and error handling

✅ Write comprehensive tests

✅ Prepare for deployment